name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to deploy from'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - prod
          - develop
          - feature/
          - bugfix/
          - hotfix/
          - release/
      custom_branch:
        description: 'Custom branch name (if not in dropdown above)'
        required: false
        type: string
  pull_request:
    branches:
      - main

env:
  TF_VERSION: "1.6.2"
  AWS_REGION: "us-west-2"

jobs:
  lint:
    name: Lint Infrastructure
    uses: ./.github/workflows/lint.yml
    secrets:
      DOCKERHUB_USER: ${{ vars.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [lint]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/prod' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.event.inputs.custom_branch || github.event.inputs.target_branch || github.ref_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_USER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Determine Workspace
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.event.inputs.custom_branch || github.event.inputs.target_branch || github.ref_name }}"
          fi
          if [ "$BRANCH_NAME" = "prod" ]; then
            echo "prod" > .workspace
          else
            echo "staging" > .workspace
          fi
          echo "Using workspace: $(cat .workspace)"
          echo "Branch: $BRANCH_NAME"

      - name: Push to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          # Use GITHUB_SHA for automatic runs, timestamp for manual runs
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            IMAGE_TAG="manual-$(date +%Y%m%d-%H%M%S)"
          else
            IMAGE_TAG="$GITHUB_SHA"
          fi
          # Build the hash lambda image
          cd app/process
          docker build --compress -f Dockerfile -t ${{ vars.ECR_REPO_HASH_LAMBDA }}:$IMAGE_TAG ..
          docker push ${{ vars.ECR_REPO_HASH_LAMBDA }}:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          # Build the web image
          cd ../web
          docker build --compress -f Dockerfile -t ${{ vars.ECR_REPO_WEB }}:$IMAGE_TAG ..
          docker push ${{ vars.ECR_REPO_WEB }}:$IMAGE_TAG
          # Build the reverse proxy image
          cd ../proxy
          docker build --compress -f Dockerfile -t ${{ vars.ECR_REPO_PROXY }}:$IMAGE_TAG .
          docker push ${{ vars.ECR_REPO_PROXY }}:$IMAGE_TAG

      - name: Terraform Init
        run: |
          cd infra/deploy
          terraform init

      - name: Terraform Plan
        env:
          TF_VAR_s3_bucket_name: ${{ vars.S3_BUCKET_NAME }}
          TF_VAR_ecr_lambda_md5_image: ${{ vars.ECR_REPO_HASH_LAMBDA }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_app_image: ${{ vars.ECR_REPO_WEB }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_proxy_image: ${{ vars.ECR_REPO_PROXY }}:${{ env.IMAGE_TAG }}
        run: |
          cd infra/deploy
          WORKSPACE=$(cat ../../.workspace)
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.target_branch == 'main' || github.ref == 'refs/heads/main')
        env:
          TF_VAR_s3_bucket_name: ${{ vars.S3_BUCKET_NAME }}
          TF_VAR_ecr_lambda_md5_image: ${{ vars.ECR_REPO_HASH_LAMBDA }}:${{ env.IMAGE_TAG }}

        run: |
          cd infra/deploy
          WORKSPACE=$(cat ../../.workspace)
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE
          terraform apply -auto-approve tfplan 
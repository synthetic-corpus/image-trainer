name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to deploy from'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - prod
          - develop
          - feature/
          - bugfix/
          - hotfix/
          - release/
      custom_branch:
        description: 'Custom branch name (if not in dropdown above)'
        required: false
        type: string
  pull_request:
    branches:
      - main

env:
  TF_VERSION: "1.6.2"
  AWS_REGION: "us-west-2"

jobs:
  lint:
    name: Lint Infrastructure
    uses: ./.github/workflows/lint.yml
    secrets:
      DOCKERHUB_USER: ${{ vars.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [lint]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/prod' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.event.inputs.custom_branch || github.event.inputs.target_branch || github.ref_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_USER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Determine Workspace
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.event.inputs.custom_branch || github.event.inputs.target_branch || github.ref_name }}"
          fi
          if [ "$BRANCH_NAME" = "prod" ]; then
            echo "prod" > .workspace
          else
            echo "staging" > .workspace
          fi
          echo "Using workspace: $(cat .workspace)"
          echo "Branch: $BRANCH_NAME"

      - name: Push to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          # Use GITHUB_SHA for automatic runs, timestamp for manual runs
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            IMAGE_TAG="manual-$(date +%Y%m%d-%H%M%S)"
          else
            IMAGE_TAG="$GITHUB_SHA"
          fi
          # Build the hash lambda image
          cd app/process
          docker build --compress -f Dockerfile -t ${{ vars.ECR_REPO_HASH_LAMBDA }}:$IMAGE_TAG ..
          docker push ${{ vars.ECR_REPO_HASH_LAMBDA }}:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          # Build the numpy-convert lambda image
          cd ../numpy-convert
          docker build --compress -f Dockerfile -t ${{ vars.ECR_REPO_NUMPY_LAMBDA }}:$IMAGE_TAG ..
          docker push ${{ vars.ECR_REPO_NUMPY_LAMBDA }}:$IMAGE_TAG
          # Build the web image
          cd ../web
          docker build --compress -f Dockerfile -t ${{ vars.ECR_REPO_WEB }}:$IMAGE_TAG ..
          docker push ${{ vars.ECR_REPO_WEB }}:$IMAGE_TAG
          # Build the reverse proxy image
          cd ../proxy
          docker build --compress -f Dockerfile -t ${{ vars.ECR_REPO_PROXY }}:$IMAGE_TAG .
          docker push ${{ vars.ECR_REPO_PROXY }}:$IMAGE_TAG
          # Build the database initialization image
          cd ../db_init
          docker build --compress -f Dockerfile -t ${{ vars.ECR_INIT_DB }}:$IMAGE_TAG .
          docker push ${{ vars.ECR_INIT_DB }}:$IMAGE_TAG

      - name: Terraform Init
        run: |
          cd infra/deploy
          terraform init

      - name: Debug Script Environment
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.target_branch == 'main' || github.ref == 'refs/heads/main')
        run: |
          echo "=== Debugging Script Environment ==="
          echo "Current directory: $(pwd)"
          echo "Available tools:"
          which aws || echo "AWS CLI not found"
          which jq || echo "jq not found"
          which python3 || echo "python3 not found"
          which pip || echo "pip not found"
          which psql || echo "psql not found"
          echo "PATH: $PATH"
          echo ""

      - name: Debug Script Permissions
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.target_branch == 'main' || github.ref == 'refs/heads/main')
        run: |
          echo "=== Debugging Script Permissions ==="
          cd infra/deploy
          echo "Scripts directory contents:"
          ls -la scripts/
          echo ""
          echo "Making scripts executable..."
          chmod +x scripts/*.sh
          echo "After chmod:"
          ls -la scripts/
          echo ""

      - name: Debug Script Contents
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.target_branch == 'main' || github.ref == 'refs/heads/main')
        run: |
          echo "=== Debugging Script Contents ==="
          cd infra/deploy/scripts
          echo "First 10 lines of each script:"
          for script in *.sh; do
            echo "--- $script ---"
            head -10 "$script"
            echo ""
          done

      - name: Determine Database Approach
        env:
          DB_USER: "imagetraineruser"
          DB_PASSWORD: ${{ secrets.TF_VAR_DB_PASSWORD }}
        run: |
          echo "=== Running Determine Database Approach ==="
          cd infra/deploy
          echo "Current directory: $(pwd)"
          chmod +x scripts/*.sh
          cd scripts
          echo "Scripts directory: $(pwd)"
          echo "Available scripts:"
          ls -la *.sh
          echo ""
          echo "Running determine-db-approach.sh..."
          eval "$(./determine-db-approach.sh)"
          # Convert string "true"/"false" to boolean for Terraform
          if [ "$USE_SNAPSHOT" = "true" ]; then
            echo "USE_SNAPSHOT=true" >> $GITHUB_ENV
          else
            echo "USE_SNAPSHOT=false" >> $GITHUB_ENV
          fi
          echo "SNAPSHOT_IDENTIFIER=${SNAPSHOT_IDENTIFIER}" >> $GITHUB_ENV
          echo "DB_APPROACH=${DB_APPROACH}" >> $GITHUB_ENV
          echo "Database approach: ${DB_APPROACH}"
          echo "USE_SNAPSHOT value: ${USE_SNAPSHOT}"
          echo "USE_SNAPSHOT type: $(echo "$USE_SNAPSHOT" | tr -d '"')"

      - name: Terraform Plan
        env:
          TF_VAR_s3_bucket_name: ${{ vars.S3_BUCKET_NAME }}
          TF_VAR_ecr_lambda_md5_image: ${{ vars.ECR_REPO_HASH_LAMBDA }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_numpy_lambda_image: ${{ vars.ECR_REPO_NUMPY_LAMBDA }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_init_db_image: ${{ vars.ECR_INIT_DB }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_app_image: ${{ vars.ECR_REPO_WEB }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_proxy_image: ${{ vars.ECR_REPO_PROXY }}:${{ env.IMAGE_TAG }}
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_use_snapshot: ${{ env.USE_SNAPSHOT }}
          TF_VAR_snapshot_identifier: ${{ env.SNAPSHOT_IDENTIFIER }}
        run: |
          cd infra/deploy
          WORKSPACE=$(cat ../../.workspace)
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.target_branch == 'main' || github.ref == 'refs/heads/main')
        env:
          TF_VAR_s3_bucket_name: ${{ vars.S3_BUCKET_NAME }}
          TF_VAR_ecr_lambda_md5_image: ${{ vars.ECR_REPO_HASH_LAMBDA }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_numpy_lambda_image: ${{ vars.ECR_REPO_NUMPY_LAMBDA }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_init_db_image: ${{ vars.ECR_INIT_DB }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_app_image: ${{ vars.ECR_REPO_WEB }}:${{ env.IMAGE_TAG }}
          TF_VAR_ecr_proxy_image: ${{ vars.ECR_REPO_PROXY }}:${{ env.IMAGE_TAG }}
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_use_snapshot: ${{ env.USE_SNAPSHOT }}
          TF_VAR_snapshot_identifier: ${{ env.SNAPSHOT_IDENTIFIER }}
        run: |
          cd infra/deploy
          WORKSPACE=$(cat ../../.workspace)
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.target_branch == 'main' || github.ref == 'refs/heads/main')
        run: |
          cd infra/deploy
          WORKSPACE=$(cat ../../.workspace)
          terraform workspace select $WORKSPACE
          echo "DB_ENDPOINT=$(terraform output -raw db_endpoint)" >> $GITHUB_ENV
          echo "DB_NAME=$(terraform output -raw db_name)" >> $GITHUB_ENV
          echo "DB_USERNAME=$(terraform output -raw db_username)" >> $GITHUB_ENV

      # - name: Invoke Database Initialization Lambda
      #   if: github.event_name == 'workflow_dispatch' && (github.event.inputs.target_branch == 'main' || github.ref == 'refs/heads/main')
      #   run: |
      #     echo "=== Invoking Database Initialization Lambda ==="
      #     cd infra/deploy
      #     WORKSPACE=$(cat ../../.workspace)
      #     terraform workspace select $WORKSPACE
      #     
      #     # Get the Lambda function name from Terraform output
      #     LAMBDA_FUNCTION_NAME=$(terraform output -raw init_db_lambda_function_name)
      #     echo "Lambda function name: $LAMBDA_FUNCTION_NAME"
      #     
      #     # Wait a moment for the database to be fully available
      #     echo "Waiting 30 seconds for database to be fully available..."
      #     sleep 30
      #     
      #     # Retry logic for Lambda invocation
      #     MAX_RETRIES=3
      #     RETRY_COUNT=0
      #     
      #     while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
      #       echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
      #       
      #       # Invoke the Lambda function
      #       echo "Invoking Lambda function..."
      #       if aws lambda invoke \
      #         --function-name "$LAMBDA_FUNCTION_NAME" \
      #         --payload '{"source": "manual.deployment", "detail-type": "Manual Database Initialization", "detail": {"trigger": "deployment_pipeline"}}' \
      #         --region ${{ env.AWS_REGION }} \
      #         response.json; then
      #         
      #         # Check the response
      #         echo "Lambda invocation response:"
      #         cat response.json
      #         
      #         # Parse the response to check if it was successful
      #         if jq -e '.StatusCode == 200' response.json > /dev/null 2>&1; then
      #           echo "✅ Lambda function invoked successfully"
      #           break
      #         else
      #           echo "⚠️ Lambda invoked but returned non-200 status"
      #           cat response.json
      #         fi
      #       else
      #         echo "❌ Failed to invoke Lambda function"
      #       fi
      #       
      #       RETRY_COUNT=$((RETRY_COUNT + 1))
      #       
      #       if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
      #         echo "Waiting 10 seconds before retry..."
      #         sleep 10
      #       fi
      #     done
      #     
      #     # Final check
      #     if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
      #       echo "❌ Failed to invoke Lambda function after $MAX_RETRIES attempts"
      #       exit 1
      #     fi

      # - name: Check Lambda Logs
      #   if: github.event_name == 'workflow_dispatch' && (github.event.inputs.target_branch == 'main' || github.ref == 'refs/heads/main')
      #   run: |
      #     echo "=== Checking Lambda Logs ==="
      #     cd infra/deploy
      #     WORKSPACE=$(cat ../../.workspace)
      #     terraform workspace select $WORKSPACE
      #     
      #     LAMBDA_FUNCTION_NAME=$(terraform output -raw init_db_lambda_function_name)
      #     LOG_GROUP_NAME="/aws/lambda/$LAMBDA_FUNCTION_NAME"
      #     
      #     echo "Checking logs for: $LOG_GROUP_NAME"
      #     
      #     # Get the latest log stream
      #     LATEST_STREAM=$(aws logs describe-log-streams \
      #       --log-group-name "$LOG_GROUP_NAME" \
      #       --order-by LastEventTime \
      #       --descending \
      #       --max-items 1 \
      #       --region ${{ env.AWS_REGION }} \
      #       --query 'logStreams[0].logStreamName' \
      #       --output text)
      #     
      #     if [ "$LATEST_STREAM" != "None" ] && [ "$LATEST_STREAM" != "null" ]; then
      #       echo "Latest log stream: $LATEST_STREAM"
      #       echo "=== Recent Lambda Logs ==="
      #       aws logs get-log-events \
      #         --log-group-name "$LOG_GROUP_NAME" \
      #         --log-stream-name "$LATEST_STREAM" \
      #         --region ${{ env.AWS_REGION }} \
      #         --query 'events[*].message' \
      #         --output text | tail -20
      #     else
      #       echo "No log streams found for Lambda function"
      #     fi 